defApplication('oml:app:trace', 'trace') do |a|

  a.version(2, 7)
  a.shortDescription = 'Packet capture'
  a.description = %{
'trace' uses libtrace to capture packets matching the
BPFilter, and report various header (IP, TCP, UDP,
Radiotap,...) fields through OML.

Note The pktid field in all MPs can be used to link
information about the multiple protocols encapsulated
in the same packet, even in cases where multiple
packets have been received at the same time, which
renders the timestamp field useless as an identifier. }

  a.defProperty('filter', 'Filter expression BPFEXP', ?f,
        :type => :string)
  a.defProperty('snaplen', '???', ?s,
        :type => :int, :unit => 'bytes')
  a.defProperty('promisc', '???', ?p,
        :type => :flag)
  a.defProperty('interface', 'Interface to trace', ?i,
        :type => :string)
  a.defProperty('radiotap', 'Enable radiotap', ?r,
        :type => :flag)

  a.defMeasurement("radiotap") do |m|
      m.defMetric('pktid',             :uint64, ' internal packet ID to link MPs')
      m.defMetric('tsft',              :uint64, ' wireless Timer Syncronisation Function')
      m.defMetric('rate',              :uint32, ' Wireless Rate')
      m.defMetric('freq',              :uint32, ' Wireless Channel Frequency')
      m.defMetric('sig_strength_dBm',  :int32, ' Wireless Signal Strength in dB')
      m.defMetric('noise_strength_dBm',:int32, ' Wireless Noise Strength in dBm')
      m.defMetric('sig_strength',      :uint32, ' Wireless Signal Strength in dB')
      m.defMetric('noise_strength',    :uint32, ' Wireless Noise Strength in dB')
      m.defMetric('attenuation',       :uint32, ' Transmit Attenuation')
      m.defMetric('attenuation_dB',    :uint32, ' Transmit Attenuation in dB')
      m.defMetric('power',             :int32, ' Transmit Power in dBm')
      m.defMetric('antenna',           :uint32, ' Wireless Antenna')
      m.defMetric('sourceMAC', :string, ' Source MAC Address')
      m.defMetric('dstMAC',    :string, ' Destination MAC Address')
 end

  a.defMeasurement("ip") do |m|
    m.defMetric('pktid',    :uint64, ' internal packet ID to link MPs')
    m.defMetric('ip_tos',   :uint32, ' Type of Service')
    m.defMetric('ip_len',   :uint32, ' Total Length')
    m.defMetric('ip_id',    :int32,  ' Identification')
    m.defMetric('ip_off',   :uint32, ' IP Fragment offset (and flags)')
    m.defMetric('ip_ttl',   :uint32, ' Time to Live')
    m.defMetric('ip_proto', :uint32, ' Protocol')
    m.defMetric('ip_sum',   :uint32, ' Checksum')
    m.defMetric('ip_src',   :string, ' Source Address')
    m.defMetric('ip_dst',   :string, ' Destination Address')
    m.defMetric('ip_sizeofpacket', :uint32, ' Size of the Packet')
    m.defMetric('ip_ts',    :double, ' timestamp of the measurement')
  end

  a.defMeasurement("tcp") do |m|
    m.defMetric('pktid',    	:uint64, ' internal packet ID to link MPs')
    m.defMetric('tcp_source',   :uint32, ' Source Port')
    m.defMetric('tcp_dest',     :uint32, ' Destination Port')
    m.defMetric('tcp_seq',      :uint32, ' TCP sequence Number')
    m.defMetric('tcp_ack_seq',  :uint32, ' Acknowledgment Number')
    m.defMetric('tcp_window',   :uint32, ' Window Size')
    m.defMetric('tcp_checksum', :uint32, ' Checksum')
    m.defMetric('tcp_urgptr',   :uint32, ' Urgent Pointer')
    m.defMetric('tcp_packet_size', :uint32, ' Size of the Packet')
    m.defMetric('tcp_ts',       :double, ' timestamp of the measurement')
  end

  a.defMeasurement("udp") do |m|
    m.defMetric('pktid', 	:uint64, ' internal packet ID to link MPs')
    m.defMetric('udp_source',   :uint32, ' Source Port')
    m.defMetric('udp_dest',     :uint32, ' Destination Port')
    m.defMetric('udp_len',      :uint32, ' Length of Datagram')
    m.defMetric('udp_checksum', :uint32, ' Checksum')
    m.defMetric('udp_ts',       :double, ' timestamp of the measurement')
  end

  a.path = "@bindir@/omf_trace"
end

# Local Variables:
# mode:ruby
# End:
