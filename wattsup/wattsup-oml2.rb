# This file was automatically generated by oml2-scaffold 2.10.0
# The syntax of this file is documented at [0].
#
# [0] http://doc.mytestbed.net/doc/omf/OmfEc/Backward/AppDefinition.html

defApplication('oml:app:wattsup-oml2', 'wattsup-oml2') do |app|

  app.version(1, 0, 0)
  app.shortDescription = 'A program for interfacing with the Watts Up? Power Meter'

  app.description = %{The Watts Up? Pro Monitor allows to monitor the following
metrics: current watts, minimum watts, maximum watts, power factor, cumulative
watt hours, average monthly kilowatt hours, tier 2 kilowatt hour threshold (used
to calculate secondary kWh rates), elapsed time, cumulative cost, average
monthly cost, line volts, minimum volts, maximum volts, current amps,
minimum amps, and maximum amps.

This application reads these metrics and reports them using OML.
  }

  app.path = "@bindir@/wattsup-oml2"

  # Declare command-line arguments; generate Popt parser with
  #  oml2-scaffold --opts wattsup-oml2.rb
  app.defProperty('loop', 'Create periodic result', '-l',
        :type => 'boolean', :mnemonic => 'l')
  app.defProperty('delay', 'Delay between consecutive measurements', '-d',
        :type => 'integer', :unit => 'seconds', :mnemonic => 'd')

  # Example of all supported command-line argument types; see popt(3) for more details
  app.defProperty('boolean_var', 'Command line option of type boolean', '--boolean',
        :type => :boolean, :var_name => 'varboolean')
  app.defProperty('string_var', 'Command line option of type string', '--string',
        :type => :string, :var_name => 'varstring')
  app.defProperty('long_var', 'Command line option of type long', '--long',
        :type => :long, :var_name => 'varlong')
  app.defProperty('int32_var', 'Command line option of type int32', '--int32',
        :type => :int32, :var_name => 'varint32')
  app.defProperty('uint32_var', 'Command line option of type uint32', '--uint32',
        :type => :uint32, :var_name => 'varuint32')
  app.defProperty('int64_var', 'Command line option of type int64', '--int64',
        :type => :int64, :var_name => 'varint64')
  app.defProperty('uint64_var', 'Command line option of type uint64', '--uint64',
        :type => :uint64, :var_name => 'varuint64')
  app.defProperty('double_var', 'Command line option of type double', '--double',
        :type => :double, :var_name => 'vardouble')

  # Declare measurement points; generate OML injection helpers with
  #  oml2-scaffold --oml wattsup-oml2.rb
  app.defMeasurement("sensor") do |mp|
    mp.defMetric('val', :int32)
    mp.defMetric('inverse', :double)
    mp.defMetric('name', :string)
  end

  # Declare a giant Measurement Point showing all supported types
  app.defMeasurement("example") do |mp|
    mp.defMetric('boolean_field', :boolean)
    mp.defMetric('string_field', :string)
    mp.defMetric('int32_field', :int32)
    mp.defMetric('uint32_field', :uint32)
    mp.defMetric('int64_field', :int64)
    mp.defMetric('uint64_field', :uint64)
    mp.defMetric('double_field', :double)
    mp.defMetric('blob_field', :blob)
    mp.defMetric('guid_field', :guid)
  end

end

# Local Variables:
# mode:ruby
# End:
# vim: ft=ruby:sw=2
