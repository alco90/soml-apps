#
# Copyright (c) 2012 National ICT Australia (NICTA), Australia
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
defApplication('oml:app:ping', 'ping') do |a|
  a.version(2, 9, 0)
  a.shortDescription = "Wrapper around ping"
  a.description = "This application runs the system ping, parses its output and reports the measurements via OML"
  a.path = "@bindir@/ping-oml2"

  a.defProperty('dest_addr', 'Address to ping', 'a', {:type => :string, :dynamic => false})
  a.defProperty('count', 'Number of times to ping', 'c', {:type => :integer, :dynamic => false})
  a.defProperty('interval', 'Interval between pings in s', 'i', {:type => :integer, :dynamic => false})
  a.defProperty('quiet', 'Don\'t show ping output on the console', 'q', {:type => :boolean, :dynamic => false})
  a.defProperty('inet6', 'Use ping6 rather than ping', '6', {:type => :boolean, :dynamic => false})

  a.defMeasurement('ping') do |m|
    m.defMetric('dest_addr',:string)
    m.defMetric('ttl',:uint32)
    m.defMetric('rtt',:double)
    m.defMetric('rtt_unit',:string)
  end

  a.defMeasurement('summary') do |m|
    m.defMetric('ntransmitted',:uint32)
    m.defMetric('nreceived',:uint32)
    m.defMetric('lossratio',:double)
    m.defMetric('runtime',:double)
    m.defMetric('runtime_unit',:string)
  end
end

# Example use with OMF:
#defProperty('source', "node1-1.grid.orbit-lab.org", "ID of a resource")
#defProperty('sink', "node1-2.grid.orbit-lab.org", "ID of a resource")
#defProperty('sinkaddr', 'node1-2.grid.orbit-lab.org', "Ping destination address")
#
#defGroup('Source', property.source) do |node|
#  node.addApplication("oml:app:ping") do |app|
#    app.setProperty('dest_addr', property.sinkaddr)
#    app.setProperty('count', 5)
#    app.setProperty('interval', 1)
#    app.measure('ping', :samples => 1)
#  end
#end
#
#defGroup('Sink', property.sink) do |node|
#end
#
#onEvent(:ALL_UP_AND_INSTALLED) do |event|
#  info "Starting the ping"
#  group('Source').startApplications
#  wait 6
#  info "Stopping the ping"
#  group('Source').stopApplications
#  Experiment.done
#end

# Local Variables:
# mode:ruby
# End:
# vim: ft=ruby:sw=2
