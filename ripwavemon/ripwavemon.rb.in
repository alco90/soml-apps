#
# Copyright 2010-2014 National ICT Australia (NICTA)
#
# This software may be used and distributed solely under the terms of
# the MIT license (License).  You should find a copy of the License in
# COPYING or at http://opensource.org/licenses/MIT. By downloading or
# using this software you accept the terms and the liability disclaimer
# in the License.
#
defApplication('oml:app:ripwavemon', 'ripwavemon') do |app|

  app.version(2, 9, -0)
  app.shortDescription = 'Report statistics from a Navini RipWave modem'
  app.description = %{This application parses periodic UDP status messages from a
Navini RipWave modem (Unwired, Exetel, nTelos).
  }
  app.path = "@bindir@/ripwavemon-oml2"

  app.defMeasurement("ripwave_stats") do |m|
    # Measurements are in the same order as the report packet
    m.defMetric('modemid', :uint32,
		:description => 'Modem identifier (32 bits)')
    m.defMetric('month', :uint32, :unit => "month",
		:description => 'Month as reported by the modem')
    m.defMetric('day', :uint32, :unit => "day",
		:description => 'Day as reported by the modem')
    m.defMetric('year', :uint32, :unit => "year",
		:description => 'Year as reported by the modem')
    m.defMetric('hour', :uint32, :unit => "hour",
		:description => 'Hour as reported by the modem')
    m.defMetric('minute', :uint32, :unit => "minute",
		:description => 'Minute as reported by the modem')
    m.defMetric('second', :uint32, :unit => "second",
		:description => 'Second as reported by the modem')
    m.defMetric('syncstrength1', :int32, :unit => "decibel",
		:description => 'Absolute Signal Strength 1') # the report has absolute values
    m.defMetric('btsid', :uint32,
		:description => 'Base Tranceiver Station ID (8 bits)')
    m.defMetric('networkid', :uint32,
		:description => 'Network identifier (16 bits)')
    m.defMetric('antenna', :uint32,
		:description => 'Antenna in use (8 bits: 0x00=upright, 0x20=patch 1, 0x40=patch 2])')
    m.defMetric('syncstrength2', :int32, :unit => "decibel",
		:description => 'Absolute Signal Strength 2') # ditto
    m.defMetric('snr', :uint32, :unit => "decibel",
		:description => 'Signal to noise ratio')
    m.defMetric('temperature', :uint32, :unit => "degree Celsius",
		:description => 'Temperature')
  end

end

# Local Variables:
# mode:ruby
# End:
# vim: ft=ruby:sw=2
